go get github.com/segmentio/kafka-go

package main

import (
	"context"
	"fmt"
	"log"
	"time"

	"github.com/segmentio/kafka-go"
)

func main() {
	topic := "test_topic"
	partition := 0

	// Create a Kafka writer (producer)
	writer := &kafka.Writer{
		Addr:         kafka.TCP("localhost:9092"), // Kafka broker address
		Topic:        topic,
		Balancer:     &kafka.LeastBytes{},        // Load balancing strategy
		RequiredAcks: kafka.RequireOne,          // Wait for leader acknowledgment
	}

	defer writer.Close()

	// Prepare the message
	message := kafka.Message{
		Key:   []byte("Key-A"),
		Value: []byte("Hello, Kafka from Golang using segmentio!"),
	}

	// Send the message
	err := writer.WriteMessages(context.Background(), message)
	if err != nil {
		log.Fatalf("Failed to write message: %v", err)
	}

	fmt.Println("Message sent successfully!")
}





Steps in Producer

Uses kafka.Writer to send messages.
Connects to Kafka at localhost:9092.
Sends a message with a key (Key-A).
Uses LeastBytes for efficient load balancing.


package main

import (
	"context"
	"fmt"
	"log"

	"github.com/segmentio/kafka-go"
)

func main() {
	topic := "test_topic"

	// Create a Kafka reader (consumer)
	reader := kafka.NewReader(kafka.ReaderConfig{
		Brokers:  []string{"localhost:9092"},
		Topic:    topic,
		GroupID:  "my-group",
		MinBytes: 10e3, // 10KB
		MaxBytes: 10e6, // 10MB
	})

	defer reader.Close()

	fmt.Println("Kafka Consumer started...")

	for {
		// Read messages
		msg, err := reader.ReadMessage(context.Background())
		if err != nil {
			log.Fatalf("Failed to read message: %v", err)
		}
		fmt.Printf("Received message: Key=%s, Value=%s\n", string(msg.Key), string(msg.Value))
	}
}




Steps in Consumer

Uses kafka.Reader to consume messages.
Connects to Kafka at localhost:9092.
Reads messages in an infinite loop.
Prints the received Key and Value.


Adding a Filter (Reading Only Specific Keys)
Modify the consumer to filter messages:

go
Copy
Edit
if string(msg.Key) == "Key-A" {
    fmt.Printf("Filtered message: Key=%s, Value=%s\n", msg.Key, msg.Value)
}


