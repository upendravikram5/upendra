Step 1: Install Resty
First, install Resty using go get:

sh
Copy
Edit
go get github.com/go-resty/resty/v2
Step 2: Define the Request Struct
Create a struct that represents the JSON body you want to send in the POST request.

go
Copy
Edit
package main

import (
	"fmt"
	"log"

	"github.com/go-resty/resty/v2"
)

// Request Body Struct
type CreateUserRequest struct {
	Name  string `json:"name"`
	Email string `json:"email"`
	Age   int    `json:"age"`
}

// Response Body Struct
type CreateUserResponse struct {
	ID      int    `json:"id"`
	Name    string `json:"name"`
	Email   string `json:"email"`
	Message string `json:"message"`
}

func main() {
	// Create a new Resty client
	client := resty.New()

	// Define request payload
	requestBody := CreateUserRequest{
		Name:  "John Doe",
		Email: "john@example.com",
		Age:   30,
	}

	// Make the POST request
	resp, err := client.R().
		SetHeader("Content-Type", "application/json").  // Set headers
		SetHeader("Authorization", "Bearer your-token"). // Set auth token
		SetBody(requestBody). // Set the request body (automatically marshaled to JSON)
		SetResult(&CreateUserResponse{}). // Automatically unmarshal JSON into struct
		Post("https://api.example.com/users") // Your API URL

	if err != nil {
		log.Fatalf("Error making request: %v", err)
	}

	// Check the status code
	if resp.IsError() {
		log.Fatalf("Request failed: %v", resp.Status())
	}

	// Parse and print the response
	responseBody := resp.Result().(*CreateUserResponse)
	fmt.Printf("User Created! ID: %d, Name: %s, Email: %s, Message: %s\n",
		responseBody.ID, responseBody.Name, responseBody.Email, responseBody.Message)
}
Step 3: Explanation
Resty client: Creates an HTTP client for making requests.
SetHeader(): Adds headers (like Authorization and Content-Type).
SetBody(): Marshals the struct into JSON automatically.
SetResult(): Unmarshals the JSON response into a struct.
Post(URL): Sends the POST request to the API endpoint.
Sample JSON Request & Response
Request Body Sent
json
Copy
Edit
{
  "name": "John Doe",
  "email": "john@example.com",
  "age": 30
}
API Response (Example)
json
Copy
Edit
{
  "id": 101,
  "name": "John Doe",
  "email": "john@example.com",
  "message": "User successfully created"
}
Extra Features in Resty
1. Custom Timeout
go
Copy
Edit
client.SetTimeout(10 * time.Second)
2. Debugging Requests
go
Copy
Edit
client.SetDebug(true)
3. Handling Query Parameters
go
Copy
Edit
client.R().SetQueryParams(map[string]string{
	"status": "active",
	"sort":   "desc",
})
Conclusion
Resty makes it easier to work with REST APIs in Go compared to the built-in net/http package. It provides automatic JSON marshaling/unmarshaling, simplified headers, timeouts, and error handling.
